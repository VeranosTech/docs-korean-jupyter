# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Jupyter Team, https://jupyter.org
# This file is distributed under the same license as the Jupyter
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Jupyter Documentation 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/development_guide/sphinx_directive.rst:4
msgid "IPython Sphinx Directive"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:7
msgid ""
"This is copied verbatim from the old IPython wiki and is currently under "
"development. Much of the information in this part of the development "
"guide is out of date."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:9
msgid ""
"The ipython directive is a stateful ipython shell for embedding in sphinx"
" documents.  It knows about standard ipython prompts, and extracts the "
"input and output lines.  These prompts will be renumbered starting at "
"``1``.  The inputs will be fed to an embedded ipython interpreter and the"
" outputs from that interpreter will be inserted as well.  For example, "
"code blocks like the following::"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:23
msgid "will be rendered as"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:34
msgid ""
"This tutorial should be read side-by-side with the Sphinx source for this"
" document because otherwise you will see only the rendered output and not"
" the code that generated it.  Excepting the example above, we will not in"
" general be showing the literal ReST in this document that generates the "
"rendered output."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:41
msgid ""
"The state from previous sessions is stored, and standard error is "
"trapped. At doc build time, ipython's output and std err will be "
"inserted, and prompts will be renumbered. So the prompt below should be "
"renumbered in the rendered docs, and pick up where the block above left "
"off."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:66
msgid ""
"The embedded interpreter supports some limited markup.  For example, you "
"can put comments in your ipython sessions, which are reported verbatim.  "
"There are some handy \"pseudo-decorators\" that let you doctest the "
"output.  The inputs are fed to an embedded ipython session and the "
"outputs from the ipython session are inserted into your doc.  If the "
"output in your doc and in the ipython session don't match on a doctest "
"assertion, an error will be"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:92
msgid "Multi-line input is supported."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:103
msgid ""
"You can do doctesting on multi-line output as well.  Just be careful when"
" using non-deterministic inputs like random numbers in the ipython "
"directive, because your inputs are ruin through a live interpreter, so if"
" you are doctesting random output you will get an error.  Here we "
"\"seed\" the random number generator for deterministic output, and we "
"suppress the seed line so it doesn't show up in the rendered output"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:132
msgid "Another demonstration of multi-line input and output"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:156
msgid ""
"Most of the \"pseudo-decorators\" can be used an options to ipython mode."
"  For example, to setup matplotlib pylab but suppress the output, you can"
" do.  When using the matplotlib ``use`` directive, it should occur before"
" any import of pylab.  This will not show up in the rendered docs, but "
"the commands will be executed in the embedded interpreter and subsequent "
"line numbers will be incremented to reflect the inputs::"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:177
msgid ""
"Likewise, you can set ``:doctest:`` or ``:verbatim:`` to apply these "
"settings to the entire block.  For example,"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:211
msgid ""
"You can create one or more pyplot plots and insert them with the "
"``@savefig`` decorator."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:223
msgid ""
"In a subsequent session, we can update the current figure with some text,"
" and then resave"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:236
msgid "You can also have function definitions included in the source."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:250
msgid "Then call it from a subsequent section."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:262
msgid "Writing Pure Python Code"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:264
msgid ""
"Pure python code is supported by the optional argument `python`. In this "
"pure python syntax you do not include the output from the python "
"interpreter. The following markup::"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:275
msgid "Renders as"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:284
msgid ""
"We can even plot from python, using the savefig decorator, as well as, "
"suppress output with a semicolon"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:292
msgid "Similarly, std err is inserted"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:299
msgid "Comments are handled and state is preserved"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:306
msgid "If you don't see the next code block then the options work."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:313
msgid "Multi-line input is handled."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:323
msgid "Functions definitions are correctly parsed"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:336
msgid "And persist across sessions"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:343
msgid ""
"Pretty much anything you can do with the ipython code, you can do with a "
"simple python script. Obviously, though it doesn't make sense to use the "
"doctest option."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:348
msgid "Pseudo-Decorators"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:350
msgid ""
"Here are the supported decorators, and any optional arguments they take."
"  Some of the decorators can be used as options to the entire block (eg "
"``verbatim`` and ``suppress``), and some only apply to the line just "
"below them (eg ``savefig``)."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:355
msgid "@suppress"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:357
msgid ""
"execute the ipython input block, but suppress the input and output block "
"from the rendered output.  Also, can be applied to the entire "
"``..ipython`` block as a directive option with ``:suppress:``."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:361
msgid "@verbatim"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:363
msgid ""
"insert the input and output block in verbatim, but auto-increment the "
"line numbers. Internally, the interpreter will be fed an empty string, so"
" it is a no-op that keeps line numbering consistent. Also, can be applied"
" to the entire ``..ipython`` block as a directive option with "
"``:verbatim:``."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:369
msgid "@savefig OUTFILE [IMAGE_OPTIONS]"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:371
msgid ""
"save the figure to the static directory and insert it into the document, "
"possibly binding it into a minipage and/or putting code/figure "
"label/references to associate the code and the figure. Takes args to pass"
" to the image directive (*scale*, *width*, etc can be kwargs); see `image"
" options "
"<http://docutils.sourceforge.net/docs/ref/rst/directives.html#image>`_ "
"for details."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:379
msgid "@doctest"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:381
msgid ""
"Compare the pasted in output in the ipython block with the output "
"generated at doc build time, and raise errors if they donâ€™t match. "
"Also, can be applied to the entire ``..ipython`` block as a directive "
"option with ``:doctest:``."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:387
msgid "Configuration Options"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:389
msgid "ipython_savefig_dir"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:391
msgid ""
"The directory in which to save the figures. This is relative to the "
"Sphinx source directory. The default is `html_static_path`."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:394
msgid "ipython_rgxin"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:396
msgid ""
"The compiled regular expression to denote the start of IPython input "
"lines. The default is re.compile('In \\[(\\d+)\\]:\\s?(.*)\\s*'). You "
"shouldn't need to change this."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:400
msgid "ipython_rgxout"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:402
msgid ""
"The compiled regular expression to denote the start of IPython output "
"lines. The default is re.compile('Out\\[(\\d+)\\]:\\s?(.*)\\s*'). You "
"shouldn't need to change this."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:407
msgid "ipython_promptin"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:409
#, python-format
msgid ""
"The string to represent the IPython input prompt in the generated ReST. "
"The default is 'In [%d]:'. This expects that the line numbers are used in"
" the prompt."
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:413
msgid "ipython_promptout"
msgstr ""

#: ../../source/development_guide/sphinx_directive.rst:415
#, python-format
msgid ""
"The string to represent the IPython prompt in the generated ReST. The "
"default is 'Out [%d]:'. This expects that the line numbers are used in "
"the prompt."
msgstr ""

