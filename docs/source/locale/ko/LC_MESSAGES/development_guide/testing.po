# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Jupyter Team, https://jupyter.org
# This file is distributed under the same license as the Jupyter
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Jupyter Documentation 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/development_guide/testing.rst:4
msgid "Testing IPython for users and developers"
msgstr ""

#: ../../source/development_guide/testing.rst:7
msgid ""
"This is copied verbatim from the old IPython wiki and is currently under "
"development. Much of the information in this part of the development "
"guide is out of date."
msgstr ""

#: ../../source/development_guide/testing.rst:10
msgid "Overview"
msgstr ""

#: ../../source/development_guide/testing.rst:12
msgid ""
"It is extremely important that all code contributed to IPython has tests."
" Tests should be written as unittests, doctests or other entities that "
"the IPython test system can detect. See below for more details on this."
msgstr ""

#: ../../source/development_guide/testing.rst:17
msgid ""
"Each subpackage in IPython should have its own ``tests`` directory that "
"contains all of the tests for that subpackage. All of the files in the "
"``tests`` directory should have the word \"tests\" in them to enable the "
"testing framework to find them."
msgstr ""

#: ../../source/development_guide/testing.rst:22
msgid ""
"In docstrings, examples (either using IPython prompts like ``In [1]:`` or"
" 'classic' python ``>>>`` ones) can and should be included. The testing "
"system will detect them as doctests and will run them; it offers control "
"to skip parts or all of a specific doctest if the example is meant to be "
"informative but shows non-reproducible information (like filesystem "
"data)."
msgstr ""

#: ../../source/development_guide/testing.rst:29
msgid ""
"If a subpackage has any dependencies beyond the Python standard library, "
"the tests for that subpackage should be skipped if the dependencies are "
"not found. This is very important so users don't get tests failing simply"
" because they don't have dependencies."
msgstr ""

#: ../../source/development_guide/testing.rst:34
msgid ""
"The testing system we use is an extension of the `nose "
"<https://code.google.com/archive/p/python-nose>`__ test runner. In "
"particular we've developed a nose plugin that allows us to paste verbatim"
" IPython sessions and test them as doctests, which is extremely important"
" for us."
msgstr ""

#: ../../source/development_guide/testing.rst:41
msgid "Running the test suite"
msgstr ""

#: ../../source/development_guide/testing.rst:43
msgid ""
"You can run IPython from the source download directory without even "
"installing it system-wide or having configure anything, by typing at the "
"terminal:"
msgstr ""

#: ../../source/development_guide/testing.rst:51
msgid "To start the webbased notebook you can use:"
msgstr ""

#: ../../source/development_guide/testing.rst:57
msgid ""
"In order to run the test suite, you must at least be able to import "
"IPython, even if you haven't fully installed the user-facing scripts yet "
"(common in a development environment). You can then run the tests with:"
msgstr ""

#: ../../source/development_guide/testing.rst:65
msgid "Once you have installed IPython either via a full install or using:"
msgstr ""

#: ../../source/development_guide/testing.rst:71
msgid ""
"you will have available a system-wide script called ``iptest`` that runs "
"the full test suite. You can then run the suite with:"
msgstr ""

#: ../../source/development_guide/testing.rst:78
msgid ""
"By default, this excludes the relatively slow tests for "
"``IPython.parallel``. To run these, use ``iptest --all``."
msgstr ""

#: ../../source/development_guide/testing.rst:81
msgid ""
"Please note that the iptest tool will run tests against the code imported"
" by the Python interpreter. If the command ``python setup.py symlink`` "
"has been previously run then this will always be the test code in the "
"local directory via a symlink. However, if this command has not been run "
"for the version of Python being tested, there is the possibility that "
"iptest will run the tests against an installed version of IPython."
msgstr ""

#: ../../source/development_guide/testing.rst:89
msgid ""
"Regardless of how you run things, you should eventually see something "
"like:"
msgstr ""

#: ../../source/development_guide/testing.rst:114
msgid ""
"If not, there will be a message indicating which test group failed and "
"how to rerun that group individually. For example, this tests the "
"``IPython.utils`` subpackage, the ``-v`` option shows progress "
"indicators:"
msgstr ""

#: ../../source/development_guide/testing.rst:129
msgid ""
"Because the IPython test machinery is based on nose, you can use all nose"
" syntax. Options after ``--`` are passed to nose. For example, this lets "
"you run the specific test ``test_rehashx`` inside the ``test_magic`` "
"module:"
msgstr ""

#: ../../source/development_guide/testing.rst:145
msgid ""
"When developing, the ``--pdb`` and ``--pdb-failures`` of nose are "
"particularly useful, these drop you into an interactive pdb session at "
"the point of the error or failure respectively: ``iptest mymodule -- "
"--pdb``."
msgstr ""

#: ../../source/development_guide/testing.rst:150
msgid ""
"The system information summary printed above is accessible from the top "
"level package. If you encounter a problem with IPython, it's useful to "
"include this information when reporting on the mailing list; use::"
msgstr ""

#: ../../source/development_guide/testing.rst:156
msgid "from IPython import sys_info print sys_info()"
msgstr ""

#: ../../source/development_guide/testing.rst:159
msgid "and include the resulting information in your query."
msgstr ""

#: ../../source/development_guide/testing.rst:162
msgid "Testing pull requests"
msgstr ""

#: ../../source/development_guide/testing.rst:164
msgid ""
"We have a script that fetches a pull request from Github, merges it with "
"master, and runs the test suite on different versions of Python. This "
"uses a separate copy of the repository, so you can keep working on the "
"code while it runs. To run it:"
msgstr ""

#: ../../source/development_guide/testing.rst:173
msgid ""
"The number is the pull request number from Github; the ``-p`` flag makes "
"it post the results to a comment on the pull request. Any further "
"arguments are passed to ``iptest``."
msgstr ""

#: ../../source/development_guide/testing.rst:177
msgid ""
"This requires the `requests <https://pypi.python.org/pypi/requests>`__ "
"and `keyring <https://pypi.python.org/pypi/keyring>`__ packages."
msgstr ""

#: ../../source/development_guide/testing.rst:181
msgid "For developers: writing tests"
msgstr ""

#: ../../source/development_guide/testing.rst:183
msgid ""
"By now IPython has a reasonable test suite, so the best way to see what's"
" available is to look at the ``tests`` directory in most subpackages. But"
" here are a few pointers to make the process easier."
msgstr ""

#: ../../source/development_guide/testing.rst:188
msgid "Main tools: ``IPython.testing``"
msgstr ""

#: ../../source/development_guide/testing.rst:190
msgid ""
"The ``IPython.testing`` package is where all of the machinery to test "
"IPython (rather than the tests for its various parts) lives. In "
"particular, the ``iptest`` module in there has all the smarts to control "
"the test process. In there, the ``make_exclude`` function is used to "
"build a blacklist of exclusions, these are modules that do not get even "
"imported for tests. This is important so that things that would fail to "
"even import because of missing dependencies don't give errors to end "
"users, as we stated above."
msgstr ""

#: ../../source/development_guide/testing.rst:199
msgid ""
"The ``decorators`` module contains a lot of useful decorators, especially"
" useful to mark individual tests that should be skipped under certain "
"conditions (rather than blacklisting the package altogether because of a "
"missing major dependency)."
msgstr ""

#: ../../source/development_guide/testing.rst:205
msgid "Our nose plugin for doctests"
msgstr ""

#: ../../source/development_guide/testing.rst:207
msgid ""
"The ``plugin`` subpackage in testing contains a nose plugin called "
"``ipdoctest`` that teaches nose about IPython syntax, so you can write "
"doctests with IPython prompts. You can also mark doctest output with ``# "
"random`` for the output corresponding to a single input to be ignored "
"(stronger than using ellipsis and useful to keep it as an example). If "
"you want the entire docstring to be executed but none of the output from "
"any input to be checked, you can use the ``# all-random`` marker. The "
"``IPython.testing.plugin.dtexample`` module contains examples of how to "
"use these; for reference here is how to use ``# random``:"
msgstr ""

#: ../../source/development_guide/testing.rst:249
msgid "and an example of ``# all-random``:"
msgstr ""

#: ../../source/development_guide/testing.rst:279
msgid ""
"When writing docstrings, you can use the ``@skip_doctest`` decorator to "
"indicate that a docstring should *not* be treated as a doctest at all. "
"The difference between ``# all-random`` and ``@skip_doctest`` is that the"
" former executes the example but ignores output, while the latter doesn't"
" execute any code. ``@skip_doctest`` should be used for docstrings whose "
"examples are purely informational."
msgstr ""

#: ../../source/development_guide/testing.rst:286
msgid ""
"If a given docstring fails under certain conditions but otherwise is a "
"good doctest, you can use code like the following, that relies on the "
"'null' decorator to leave the docstring intact where it works as a test:"
msgstr ""

#: ../../source/development_guide/testing.rst:304
msgid ""
"With our nose plugin that understands IPython syntax, an extremely "
"effective way to write tests is to simply copy and paste an interactive "
"session into a docstring. You can writing this type of test, where your "
"docstring is meant *only* as a test, by prefixing the function name with "
"``doctest_`` and leaving its body *absolutely empty* other than the "
"docstring. In ``IPython.core.tests.test_magic`` you can find several "
"examples of this, but for completeness sake, your code should look like "
"this (a simple case):"
msgstr ""

#: ../../source/development_guide/testing.rst:322
msgid ""
"This function is only analyzed for its docstring but it is not considered"
" a separate test, which is why its body should be empty."
msgstr ""

#: ../../source/development_guide/testing.rst:326
msgid "JavaScript Tests"
msgstr ""

#: ../../source/development_guide/testing.rst:328
msgid ""
"We currently use `casperjs <http://casperjs.org/>`__ for testing the "
"notebook javascript user interface."
msgstr ""

#: ../../source/development_guide/testing.rst:331
msgid ""
"To run the JS test suite by itself, you can either use ``iptest js``, "
"which will start up a new notebook server and test against it, or you can"
" open up a notebook server yourself, and then:"
msgstr ""

#: ../../source/development_guide/testing.rst:340
msgid ""
"If your testing notebook server uses something other than the default "
"port (8888), you will have to pass that as a parameter to the test suite "
"as well."
msgstr ""

#: ../../source/development_guide/testing.rst:349
msgid "Running individual tests"
msgstr ""

#: ../../source/development_guide/testing.rst:351
msgid ""
"To speed up development, you usually are working on getting one test "
"passing at a time. To do this, just pass the filename directly to the "
"``casperjs test`` command like so:"
msgstr ""

#: ../../source/development_guide/testing.rst:360
msgid "Wrapping your head around the javascript within javascript:"
msgstr ""

#: ../../source/development_guide/testing.rst:362
msgid ""
"CasperJS is a browser that's written in javascript, so we write "
"javascript code to drive it. The Casper browser itself also has a "
"javascript implementation (like the ones that come with Firefox and "
"Chrome), and in the test suite we get access to those using "
"``this.evaluate``, and it's cousins (``this.theEvaluate``, etc). "
"Additionally, because of the asynchronous / callback nature of "
"everything, there are plenty of ``this.then`` calls which define steps in"
" test suite. Part of the reason for this is that each step has a timeout "
"(default of 5 or 10 seconds). Additionally, there are already convenience"
" functions in ``util.js`` to help you wait for output in a given cell, "
"etc. In our javascript tests, if you see functions which "
"``look_like_pep8_naming_convention``, those are probably coming from "
"``util.js``, whereas functions that come with casper "
"``haveCamelCaseNamingConvention``"
msgstr ""

#: ../../source/development_guide/testing.rst:377
msgid ""
"Each file in ``test_cases`` looks something like this (this is "
"``test_cases/check_interrupt.js``):"
msgstr ""

#: ../../source/development_guide/testing.rst:419
msgid ""
"For an example of how to pass parameters to the client-side javascript "
"from casper test suite, see the ``casper.wait_for_output`` implementation"
" in ``IPython/html/tests/casperjs/util.js``"
msgstr ""

#: ../../source/development_guide/testing.rst:424
msgid "Testing system design notes"
msgstr ""

#: ../../source/development_guide/testing.rst:426
msgid ""
"This section is a set of notes on the key points of the IPython testing "
"needs, that were used when writing the system and should be kept for "
"reference as it eveolves."
msgstr ""

#: ../../source/development_guide/testing.rst:430
msgid ""
"Testing IPython in full requires modifications to the default behavior of"
" nose and doctest, because the IPython prompt is not recognized to "
"determine Python input, and because IPython admits user input that is not"
" valid Python (things like ``%magics`` and ``!system commands``."
msgstr ""

#: ../../source/development_guide/testing.rst:435
msgid "We basically need to be able to test the following types of code:"
msgstr ""

#: ../../source/development_guide/testing.rst:439
msgid ""
"Pure Python files containing normal tests. These are not a problem, since"
" Nose will pick them up as long as they conform to the (flexible) "
"conventions used by nose to recognize tests."
msgstr ""

#: ../../source/development_guide/testing.rst:445
msgid "Python files containing doctests. Here, we have two possibilities:"
msgstr ""

#: ../../source/development_guide/testing.rst:448
msgid "The prompts are the usual ``>>>`` and the input is pure Python."
msgstr ""

#: ../../source/development_guide/testing.rst:449
msgid ""
"The prompts are of the form ``In [1]:`` and the input can contain "
"extended IPython expressions."
msgstr ""

#: ../../source/development_guide/testing.rst:452
msgid ""
"In the first case, Nose will recognize the doctests as long as it is "
"called with the ``--with-doctest`` flag. But the second case will likely "
"require modifications or the writing of a new doctest plugin for Nose "
"that is IPython-aware."
msgstr ""

#: ../../source/development_guide/testing.rst:459
msgid ""
"ReStructuredText files that contain code blocks. For this type of file, "
"we have three distinct possibilities for the code blocks:"
msgstr ""

#: ../../source/development_guide/testing.rst:462
msgid "They use ``>>>`` prompts."
msgstr ""

#: ../../source/development_guide/testing.rst:463
msgid "They use ``In [1]:`` prompts."
msgstr ""

#: ../../source/development_guide/testing.rst:464
msgid "They are standalone blocks of pure Python code without any prompts."
msgstr ""

#: ../../source/development_guide/testing.rst:466
msgid ""
"The first two cases are similar to the situation #2 above, except that in"
" this case the doctests must be extracted from input code blocks using "
"docutils instead of from the Python docstrings."
msgstr ""

#: ../../source/development_guide/testing.rst:470
msgid ""
"In the third case, we must have a convention for distinguishing code "
"blocks that are meant for execution from others that may be snippets of "
"shell code or other examples not meant to be run. One possibility is to "
"assume that all indented code blocks are meant for execution, but to have"
" a special docutils directive for input that should not be executed."
msgstr ""

#: ../../source/development_guide/testing.rst:476
msgid ""
"For those code blocks that we will execute, the convention used will "
"simply be that they get called and are considered successful if they run "
"to completion without raising errors. This is similar to what Nose does "
"for standalone test functions, and by putting asserts or other forms of "
"exception-raising statements it becomes possible to have literate "
"examples that double as lightweight tests."
msgstr ""

#: ../../source/development_guide/testing.rst:485
msgid ""
"Extension modules with doctests in function and method docstrings. "
"Currently Nose simply can't find these docstrings correctly, because the "
"underlying doctest DocTestFinder object fails there. Similarly to #2 "
"above, the docstrings could have either pure python or IPython prompts."
msgstr ""

#: ../../source/development_guide/testing.rst:491
msgid ""
"Of these, only 3-c (reST with standalone code blocks) is not implemented "
"at this point."
msgstr ""

