# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Jupyter Team, https://jupyter.org
# This file is distributed under the same license as the Jupyter
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Jupyter Documentation 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 11:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/development_guide/coding_style.rst:4
msgid "Coding Style"
msgstr ""

#: ../../source/development_guide/coding_style.rst:7
msgid ""
"This is copied verbatim from the old IPython wiki and is currently under "
"development. Much of the information in this part of the development "
"guide is out of date."
msgstr ""

#: ../../source/development_guide/coding_style.rst:9
msgid ""
"This document describes our coding style. Coding style refers to the "
"following:"
msgstr ""

#: ../../source/development_guide/coding_style.rst:12
msgid "How source code is formatted (indentation, spacing, etc.)"
msgstr ""

#: ../../source/development_guide/coding_style.rst:13
msgid "How things are named (variables, functions, classes, modules, etc.)"
msgstr ""

#: ../../source/development_guide/coding_style.rst:16
msgid "General coding conventions"
msgstr ""

#: ../../source/development_guide/coding_style.rst:18
msgid ""
"In general, we follow the standard Python style conventions as described "
"in Python's `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`__, the "
"official Python Style Guide."
msgstr ""

#: ../../source/development_guide/coding_style.rst:22
msgid "Other general comments:"
msgstr ""

#: ../../source/development_guide/coding_style.rst:24
msgid ""
"In a large file, top level classes and functions should be separated by 2"
" lines to make it easier to separate them visually."
msgstr ""

#: ../../source/development_guide/coding_style.rst:27
msgid "Use 4 spaces for indentation, **never** use hard tabs."
msgstr ""

#: ../../source/development_guide/coding_style.rst:29
msgid ""
"Keep the ordering of methods the same in classes that have the same "
"methods. This is particularly true for classes that implement similar "
"interfaces and for interfaces that are similar."
msgstr ""

#: ../../source/development_guide/coding_style.rst:34
msgid "Naming conventions"
msgstr ""

#: ../../source/development_guide/coding_style.rst:36
msgid ""
"For naming conventions, we also follow the guidelines of `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__. Some of the existing code"
" doesn't honor this perfectly, but for all new and refactored IPython "
"code, we'll use:"
msgstr ""

#: ../../source/development_guide/coding_style.rst:41
msgid ""
"All ``lowercase`` module names. Long module names can have words "
"separated by underscores (``really_long_module_name.py``), but this is "
"not required. Try to use the convention of nearby files."
msgstr ""

#: ../../source/development_guide/coding_style.rst:45
msgid "``CamelCase`` for class names."
msgstr ""

#: ../../source/development_guide/coding_style.rst:47
msgid ""
"``lowercase_with_underscores`` for methods, functions, variables and "
"attributes."
msgstr ""

#: ../../source/development_guide/coding_style.rst:50
msgid ""
"Implementation-specific *private* methods will use "
"``_single_underscore_prefix``. Names with a leading double underscore "
"will *only* be used in special cases, as they makes subclassing difficult"
" (such names are not easily seen by child classes)."
msgstr ""

#: ../../source/development_guide/coding_style.rst:55
msgid ""
"Occasionally some run-in lowercase names are used, but mostly for very "
"short names or where we are implementing methods very similar to existing"
" ones in a base class (like ``runlines()`` where ``runsource()`` and "
"``runcode()`` had established precedent)."
msgstr ""

#: ../../source/development_guide/coding_style.rst:60
msgid ""
"The old IPython codebase has a big mix of classes and modules prefixed "
"with an explicit ``IP`` of ``ip``. This is not necessary and all new code"
" should not use this prefix. The only case where this approach is "
"justified is for classes or functions which are expected to be imported "
"into external namespaces and a very generic name (like Shell) that is "
"likely to clash with something else. However, if a prefix seems "
"absolutely necessary the more specific ``IPY`` or ``ipy`` are preferred."
msgstr ""

#: ../../source/development_guide/coding_style.rst:69
msgid "All JavaScript code should follow these naming conventions as well."
msgstr ""

#: ../../source/development_guide/coding_style.rst:72
msgid "Attribute declarations for objects"
msgstr ""

#: ../../source/development_guide/coding_style.rst:74
msgid ""
"In general, objects should declare, in their *class*, all attributes the "
"object is meant to hold throughout its life. While Python allows you to "
"add an attribute to an instance at any point in time, this makes the code"
" harder to read and requires methods to constantly use checks with "
"hasattr() or try/except calls. By declaring all attributes of the object "
"in the class header, there is a single place one can refer to for "
"understanding the object's data interface, where comments can explain the"
" role of each variable and when possible, sensible deafaults can be "
"assigned."
msgstr ""

#: ../../source/development_guide/coding_style.rst:84
msgid ""
"If an attribute is meant to contain a mutable object, it should be set to"
" ``None`` in the class and its mutable value should be set in the "
"object's constructor. Since class attributes are shared by all instances,"
" failure to do this can lead to difficult to track bugs. But you should "
"still set it in the class declaration so the interface specification is "
"complete and documented in one place."
msgstr ""

#: ../../source/development_guide/coding_style.rst:91
msgid "A simple example:"
msgstr ""

#: ../../source/development_guide/coding_style.rst:108
msgid "New files"
msgstr ""

#: ../../source/development_guide/coding_style.rst:110
msgid ""
"When starting a new Python file for IPython, you can use the `following "
"template <./template.py>`__ as a starting point that has a few common "
"things pre-written for you."
msgstr ""

